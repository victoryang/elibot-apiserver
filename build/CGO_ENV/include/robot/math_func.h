/*basic math function*/
/*include:              */
/*trigonometric function*/
/*matrix and vector operation*/
/*pose trans/rot operation*/

#ifndef MATH_FUNC_H
#define MATH_FUNC_H

typedef struct _vec3
{
	double x;
	double y;
	double z;
}vec3;

/*基本数学公式*/

//--------------------------------------------------------------------------
// Function    : 交换a,b的值
// INPUT	   : 值a,b
// RETURN	   : NULL
//--------------------------------------------------------------------------
void SwapD(double *a,double *b);

//--------------------------------------------------------------------------
// Function    : 交换a,b的值
// INPUT	   : 值a,b
// RETURN	   : NULL
//--------------------------------------------------------------------------
void SwapI(int *a,int *b);

//--------------------------------------------------------------------------
// Function    : 求取三个变量的最小值
// INPUT	   : 值a,b,c
// RETURN	   : 最小值
//--------------------------------------------------------------------------
double MinValueThree(double a,double b,double c);

//--------------------------------------------------------------------------
// Function    : 求取两个变量的最小值
// INPUT	   : 变量a,b
// RETURN	   : 最小值
//--------------------------------------------------------------------------
double MinValueTwo(double a, double b);

//--------------------------------------------------------------------------
// Function    : 余弦定理求边公式
// INPUT	   : 边长a,边长b,angleC为边c对应的角(a、b、c分别为三角形的三条边)。
// RETURN	   : 边长c
//--------------------------------------------------------------------------

double cosineTheorem_side(double a,double b,double angleC);
//--------------------------------------------------------------------------
// Function    : 余弦定理求角公式
// INPUT	   : 边长a,边长b,边长c(a、b、c分别为三角形的三条边)。
// RETURN	   : 边c对应的角
//--------------------------------------------------------------------------
double cosineTheorem_angle(double a,double b,double c);

//--------------------------------------------------------------------------
// Function    : 符号函数
// INPUT	   : x值
// RETURN	 : x>0.0返回1,x<0.0返回-1,其他情况返回0
//--------------------------------------------------------------------------
int  sign( double x) ;

//--------------------------------------------------------------------------
// Function    : 通过正切值计算角度  （-2pi~2pi）根据关节角的限制算出角度
// INPUT	   : x值 m
// RETURN	 : 角度
//--------------------------------------------------------------------------
double AtanX(double x,int m);

//--------------------------------------------------------------------------
// Function    : 通过正切值计算角度  （0~pi）
// INPUT	   : y值 x值
// OUTPUT	 :	角度
// RETURN	 :	return double:角度
// y must >=0
//--------------------------------------------------------------------------
double Arctan2(double y, double x);

//--------------------------------------------------------------------------
// Function    : 通过正切值计算角度 (0-2pi)
// INPUT       : y值 x值
// RETURN      : 弧度
//--------------------------------------------------------------------------
double Atan3(double y, double x);

//--------------------------------------------------------------------------
// Function    : 通过正切值计算角度  （-2*pi~0）
// INPUT       : y值 x值
// RETURN      : 弧度
//--------------------------------------------------------------------------
double Atan4(double y, double x);

//--------------------------------------------------------------------------
// Function    : 通过正切值计算角度  （-2pi~2pi]
// INPUT       : y值 x值 angle（角度）
// RETURN      : 弧度
//--------------------------------------------------------------------------
double atan2PI(double y, double x,double angle);

//--------------------------------------------------------------------------
// Function    : 通过余弦值计算角度
// INPUT       : x值 m
// RETURN      : 弧度(若m!=0则减2pi)
//--------------------------------------------------------------------------
double Acos2(double x,int m);

//--------------------------------------------------------------------------
// Function    : 通过反双曲正弦函数数据 
// INPUT       :x值（-5~5）
// RETURN      : 弧度
//--------------------------------------------------------------------------
double Asinh(double x);

//--------------------------------------------------------------------------
// Function    : 算出抛物线弧长
// INPUT       : 起末点X向坐标和a
// RETURN      : 长度
//--------------------------------------------------------------------------
double ArcLength(double m,double n,double a);

//--------------------------------------------------------------------------
// Function    : 牛顿迭代_二分法解一元三次方程
// INPUT       : a[3]系数数组,x1搜索区间左值,x2搜索区间右值,epsilon搜索精度
// RETURN      : 近似的x值
//--------------------------------------------------------------------------
double Crtsafe(double a[3],double x1,double x2, double epsilon);

/*三维矢量运算*/

//--------------------------------------------------------------------------
// Function    : 三维向量点乘
// INPUT	   : 三维向量v1,三维向量v2
// RETURN	   : 点乘积
//--------------------------------------------------------------------------
double vec3dot(const vec3 *v1,const vec3 *v2);

//--------------------------------------------------------------------------
// Function    : 三维向量叉乘
// INPUT	   : 三维向量v1,三维向量v2,叉乘后向量v
// RETURN	   : NULL
//--------------------------------------------------------------------------
void vec3cross(const vec3* v1,const vec3* v2,vec3* v);

//--------------------------------------------------------------------------
// Function    : 三维向量叉乘并单位化
// INPUT	   : 三维向量v1,三维向量v2,叉乘后向量v
// RETURN	   : NULL
//--------------------------------------------------------------------------
int vec3cross_norm(const vec3* v1,const vec3* v2,vec3* v);

//--------------------------------------------------------------------------
// Function    : 三维向量减法
// INPUT	   : 三维向量v1,三维向量v2,v1减去v2后的向量v
// RETURN	   : NULL
//--------------------------------------------------------------------------
void vec3minus(const vec3* v1,const vec3* v2, vec3* v);

//--------------------------------------------------------------------------
// Function    : 三维向量缩放
// INPUT	   : 三维向量v1,缩放倍数p,缩放后向量v
// RETURN	   : NULL
//--------------------------------------------------------------------------
void vec3Xscalar(const vec3 *v1,const double p, vec3* v);

//--------------------------------------------------------------------------
// Function    : 三维向量的模
// INPUT	   : 三维向量v
// RETURN	   : 向量的模
//--------------------------------------------------------------------------
double vec3norm(const vec3 *v);

//--------------------------------------------------------------------------
// Function    : 三维向量的模
// INPUT	   : 三维数组首地址
// RETURN	   : 向量的模
//--------------------------------------------------------------------------
double normVector(double *v);

//--------------------------------------------------------------------------
// Function    : 向量单位化(vec3形式)
// INPUT	   : 目标向量首地址v1
// OUTPUT	   : 单位化后向量首地址v
// RETURN	   : 零向量错误:-1 正常:0
//--------------------------------------------------------------------------
int vec3unitize(vec3* v1,vec3* v);

//--------------------------------------------------------------------------
// Function    : 向量取和
// INPUT	   : 数组首地址v,数组维数
// RETURN	   : 数组每一维数累加的值
//--------------------------------------------------------------------------
double sumVector(double *v,int num);

//--------------------------------------------------------------------------
// Function    : 两空间点(齐次变换矩阵形式)间的单位向量
// INPUT	   : 空间点1的位姿矩阵matrix1,空间点2的位姿矩阵matrix2
// OUTPUT	   : 点2指点1的单位向量v
// RETURN	   : 点重合错误:-1 正常:0
//--------------------------------------------------------------------------
int vec3between2matrix(double matrix1[4][4],double matrix2[4][4],vec3* v);

//--------------------------------------------------------------------------
// Function    : 向量转换为矩阵
// INPUT	   : 矩阵第一列(一到三行)v1,旋转矩阵第二列(一到三行)v2,旋转矩阵第三列(一到三行)v3
// OUTPUT	   : 位姿矩阵matrix
// RETURN	   : NULL
//--------------------------------------------------------------------------
void vec3Tomatrix(vec3 *v1,vec3 *v2,vec3 *v3,double matrix[4][4]);

//--------------------------------------------------------------------------
// Function    : 计算空间两点距离长度
// INPUT	   : 三维向量v1, 三维向量v2
// RETURN	   : 空间两点距离长度
//--------------------------------------------------------------------------
double vec3_Length(vec3 *v1, vec3 *v2);

//--------------------------------------------------------------------------
// Function    : 判断空间两点是否重合
// INPUT	   : 三维向量v1, 三维向量v2
// RETURN	   : 点重合错误:-1 正常:0
//--------------------------------------------------------------------------
int vec3_DeterTwoPointIsCoincide(vec3 *v1,vec3 *v2);

/*矩阵运算*/

//--------------------------------------------------------------------------
// Function    : 把a[3][3]中的除i行和j列以外的元素放到a的前9个元素中   
// INPUT	   : 数组首地址a,行数和列数
// RETURN	   : NULL
//--------------------------------------------------------------------------
void TOSwap(int j,int n,double a[3][3]);

//--------------------------------------------------------------------------
// Function    : 求a的前9个元素组成的行列式的值   
// INPUT	   : 数组首地址a,行数和列数
// RETURN	   : NULL
//--------------------------------------------------------------------------
double CountTODeterminant(int n,double a[3][3]);

//--------------------------------------------------------------------------
// Function    : 求k×k矩阵中元素A(mn)的代数余子式
// INPUT	   : 簁×k矩阵首地址；元素A的下标m,n; 矩阵行数 k
// RETURN	  : k×k矩阵中元素A(mn)的代数余子式
//--------------------------------------------------------------------------
double CountAlgebraicComplement3x3(double A[][3], short int m,short int n);

//--------------------------------------------------------------------------
// Function    : 求nxn逆矩阵
// INPUT	   : 矩阵首地址a；矩阵维数
// OUTPUT	   : 逆矩阵首地址a
// RETURN	   : 0:正常 -1:矩阵奇异
//--------------------------------------------------------------------------
int brinv(double *a, int n);

//--------------------------------------------------------------------------
// Function    : 求逆矩阵4X4
// INPUT	   : inverMatrix逆矩阵，matrix 原矩阵
// RETURN	   : 0:正常,-1矩阵奇异
//--------------------------------------------------------------------------
int MatrixInver(double inverMatrix[4][4],double matrix[4][4]);

//--------------------------------------------------------------------------
// Function    : 求逆矩阵3X3
// INPUT	   : inverMatrix逆矩阵，matrix 原矩阵
// RETURN	   : 0:正常,-1矩阵奇异
//--------------------------------------------------------------------------
int MatrixInver3x3(double inverMatrix[3][3],double matrix[3][3]);

//--------------------------------------------------------------------------
// Function    : 计算4*4介矩阵相乘的乘积,慢算法
// INPUT	   : out 输出矩阵 op1 被乘矩阵 op2 乘矩阵
// RETURN	   : NULL
//--------------------------------------------------------------------------
void MatrixMultiplySlow(double out[][4],double op1[][4],double op2[][4]);

//--------------------------------------------------------------------------
// Function    : 计算mxn矩阵和nxl矩阵的乘积,慢算法
// INPUT	   : out 输出矩阵 op1 被乘矩阵 op2 乘矩阵
// RETURN	   : NULL
//--------------------------------------------------------------------------
void CaliMatrixMultiplySlow(double *op1,double *op2,double *out,int m,int n,int l);

//--------------------------------------------------------------------------
// Function    : 计算3x3矩阵相乘的乘积
// INPUT	   : out 输出矩阵 op1 被乘矩阵 op2 乘矩阵
// RETURN	   : NULL
//--------------------------------------------------------------------------
void MulMatrix3x3(double out[][3],double op1[][3],double op2[][3]);

//--------------------------------------------------------------------------
// Function    : 计算转置矩阵
// INPUT	   : a原矩阵首地址,at转置矩阵首地址,m行数,n列数
// RETURN	   : NULL
//--------------------------------------------------------------------------
void MatrixTranspose(double *a,double *at,int m,int n);

//--------------------------------------------------------------------------
// Function    : 计算9x3转置矩阵
// INPUT	   : matrix为原矩阵,transMatrix为转置后的矩阵
// RETURN	   : NULL
//--------------------------------------------------------------------------
void MatrixTransPos(double transMatrix[3][9],double matrix[9][3]);

/*位姿相关函数*/

//--------------------------------------------------------------------------
// Function    : 齐次变换矩阵转换成欧拉角位姿(固定角xyz或zyx欧拉角度)
// INPUT	   : 位姿矩阵matrix
// OUTPUT	   : 欧拉角度位姿
//--------------------------------------------------------------------------
void Matrix2pose(double pos[6], double matrix[][4]);

//--------------------------------------------------------------------------
// Function    :  /*欧拉角位姿(固定角xyz或zyx欧拉角度)转换成齐次变换矩阵*/
// INPUT	   : 欧拉角度位姿pos
// OUTPUT	   : 位姿矩阵matrix
//--------------------------------------------------------------------------
void MatrixBuit(double Matrix[][4],double pos[]);

//--------------------------------------------------------------------------
// Function    : 计算旋转矩阵
// INPUT	   : ff[3] , si
//OUTPUT	   :matx[4][4]
// RETURN	   : NULL
//--------------------------------------------------------------------------
void hcmatrix(double ff[3],double si,double matrix[4][4],double starMax[4][4]);

/*坐标系平移/旋转相关函数*/

//--------------------------------------------------------------------------
// Function    : 计算平移/旋转后的位姿变换矩阵
// INPUT	   : 初始位姿矩阵matrix,axis(0-5)对应xyzrxryrz,dertS为偏置量
// OUTPUT	   : 位姿矩阵matrix
//--------------------------------------------------------------------------
void CalcTransmatrix(double matrix[4][4],int axis,double dertS);

//--------------------------------------------------------------------------
// Function    : 矩阵左乘法,绕固定坐标系旋转或者平移
// INPUT	   : 输入矩阵matIn,转换矩阵matTransf
// OUTPUT	   : 旋转或者平移后的输出矩阵matOut
//--------------------------------------------------------------------------
void MatrixLeftMul(double matOut[4][4],double matTransf[4][4],double matIn[4][4]);

#endif
